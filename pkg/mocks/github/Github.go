// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	github "github.com/ministryofjustice/cloud-platform-cli/pkg/github"
	mock "github.com/stretchr/testify/mock"

	util "github.com/ministryofjustice/cloud-platform-cli/pkg/util"
)

// Github is an autogenerated mock type for the Github type
type Github struct {
	mock.Mock
}

// GetChangedFiles provides a mock function with given fields: _a0, _a1
func (_m *Github) GetChangedFiles(_a0 string, _a1 string) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListMergedPRs provides a mock function with given fields: date, count
func (_m *Github) ListMergedPRs(date util.Date, count int) ([]github.Nodes, error) {
	ret := _m.Called(date, count)

	var r0 []github.Nodes
	if rf, ok := ret.Get(0).(func(util.Date, int) []github.Nodes); ok {
		r0 = rf(date, count)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]github.Nodes)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(util.Date, int) error); ok {
		r1 = rf(date, count)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewGithub interface {
	mock.TestingT
	Cleanup(func())
}

// NewGithub creates a new instance of Github. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewGithub(t mockConstructorTestingTNewGithub) *Github {
	mock := &Github{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
